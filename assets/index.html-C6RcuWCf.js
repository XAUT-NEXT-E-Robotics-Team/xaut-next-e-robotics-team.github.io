import{_ as t,c as a,d as c,o}from"./app-Cxw_EyMP.js";const r={};function p(i,e){return o(),a("div",null,[...e[0]||(e[0]=[c('<p>1.gcc 编写一个简单的程序</p><p><span data-type="text" style="background-color:var(--b3-font-background12);">gcc安装命令：</span><br> sudo apt-get install gcc</p><p><a href="https://c.biancheng.net/cplus/" target="_blank" rel="noopener noreferrer">C++</a> 和C语言类似，也要经过编译和链接后才能运行。</p><p>下图是 C/C++ 代码生成可执行文件的过程：<br> ​<img src="https://c.biancheng.net/uploads/allimg/190212/1015294446-0.jpg" alt="C语言和C生成可执行程序的过程"></p><p>对于c/c++编程，从源代码文件变成可执行文件，大致需要以下几步：</p><ul><li>预处理 (Pre-Processing)<br> 预处理器处理#include、#​define等内容，把头文件复制到源文件中等。</li><li>编译 (Compiling)<br> 得到以汇编语言写的，可读的文件。</li><li>汇编 (Assembling)<br> 得到二进制格式，不可读的文件。<br> 编译和汇编主要是分析源代码中的内容，然后转换为目标文件。</li><li>链接 (Linking)<br> 静态库和动态库的处理体现在链接过程中，链接器把目标文件和库一起打包变成可执行文件。</li></ul><p>‍</p><h2 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc"><span>gcc</span></a></h2><p>在C语言中，我们使用<code>gcc</code>​命令来编译和链接C程序。</p><p>例如编译单个源文件：gcc main.c</p><p>编译多个源文件：gcc main.c module.c</p><p>编译C++程序时，<code>gcc</code>​命令也可以使用，不过要增加<code>-lstdc++</code>​选项，否则会发生链接错误。</p><p>例如编译单个源文件：gcc main.cpp -lstdc++</p><p>编译多个源文件：gcc main.cpp module.cpp -lstdc++</p><p>​<code>gcc</code>​命令在链接时默认使用C的库，只有添加了<code>-lstdc++</code>​选项才会使用 C++ 的库。</p><h3 id="g" tabindex="-1"><a class="header-anchor" href="#g"><span>g++</span></a></h3><p>GCC 中还有一个<code>g++</code>​命令，它专门用来编译 C++ 程序。<code>g++</code>​命令和<code>gcc</code>​命令的用法如出一辙。</p><p>例如编译单个源文件：g++ main.cpp</p><p>编译多个源文件：g++ main.cpp module.cpp</p><p>使用<code>-o</code>​选项可以指定可执行文件的名称：g++ main.cpp -o demo<br> ./demo</p><p>在以后使用 Linux GCC 时，推荐使用<code>g++</code>​命令来编译 C++ 程序，这样更加简洁和规范。</p><h1 id="_2-cmake-make-实现一个简单的多文件程序" tabindex="-1"><a class="header-anchor" href="#_2-cmake-make-实现一个简单的多文件程序"><span>2.cmake + make 实现一个简单的多文件程序</span></a></h1><ul><li><strong>用CMake创建项目</strong><br> 为什么要使用CMake？理论上说,任意一个C++程序都可以用g++来编译。但当程序规模越来越大时,一个工程可能有许多个文件夹和源文件,这时输入的编译命令将越来越长。通常一个小型Ｃ++项目可能含有十几个类，各类间还存在着复杂的依赖关系。其中一部分要编译成可执行文件，另一部分要编译成库文件。如果仅靠g++命令，我们需要输入大量的编译指令，整个编译过程会变得异常繁琐。因此，对于C++项目，使用一些工程管理工具会更加高效。历史上工程师们曾使用makefile进行自动编译，但cmake要比它更加方便。<br> 在一个cmake工程中，用cmake命令生成一个makefile文件，然后用make命令根据这个makefile文件的内容编译整个工程。</li></ul><p>使用CMake创建项目有两种方法：直接手动构建CMakeList；在VS code中通过快捷键生成CMakeList，然后在此基础上修改。</p><ul><li><p>直接手动构建CMakeList（具体方法如下，请自行阅读）</p><p>https://blog.csdn.net/Tengfei_Y/article/details/126893402?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=126893402&amp;sharerefer=PC&amp;sharesource=2401_89349528&amp;sharefrom=from_link</p></li><li><p>在VS code中通过快捷键生成CMakeList</p><p><a href="https://blog.csdn.net/Nine_Yao/article/details/124609626?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=124609626&amp;sharerefer=PC&amp;sharesource=2401_89349528&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Nine_Yao/article/details/124609626?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=124609626&amp;sharerefer=PC&amp;sharesource=2401_89349528&amp;sharefrom=from_link</a></p></li></ul><p>至此，你已经学会了使用gcc,cmake来编译c++程序，让我们以饱满的热情和坚毅的步伐继续完成后面的培训内容吧！</p>',26)])])}const s=t(r,[["render",p]]),l=JSON.parse('{"path":"/docs/algorithm_group_tuition/fjd7fxgm/","title":"第一个C++程序","lang":"zh-CN","frontmatter":{"title":"第一个C++程序","createTime":"2025/08/11 23:29:38","permalink":"/docs/algorithm_group_tuition/fjd7fxgm/","description":"1.gcc 编写一个简单的程序 gcc安装命令： sudo apt-get install gcc C++ 和C语言类似，也要经过编译和链接后才能运行。 下图是 C/C++ 代码生成可执行文件的过程： ​C语言和C生成可执行程序的过程 对于c/c++编程，从源代码文件变成可执行文件，大致需要以下几步： 预处理 (Pre-Processing) 预处理器...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一个C++程序\\",\\"image\\":[\\"https://c.biancheng.net/uploads/allimg/190212/1015294446-0.jpg\\"],\\"dateModified\\":\\"2025-08-11T15:33:10.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://xaut-next-e-robotics-team.github.io/docs/algorithm_group_tuition/fjd7fxgm/"}],["meta",{"property":"og:site_name","content":"NEXT-E"}],["meta",{"property":"og:title","content":"第一个C++程序"}],["meta",{"property":"og:description","content":"1.gcc 编写一个简单的程序 gcc安装命令： sudo apt-get install gcc C++ 和C语言类似，也要经过编译和链接后才能运行。 下图是 C/C++ 代码生成可执行文件的过程： ​C语言和C生成可执行程序的过程 对于c/c++编程，从源代码文件变成可执行文件，大致需要以下几步： 预处理 (Pre-Processing) 预处理器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://c.biancheng.net/uploads/allimg/190212/1015294446-0.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-11T15:33:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-11T15:33:10.000Z"}]]},"readingTime":{"minutes":3.26,"words":978},"git":{"createdTime":1754926390000,"updatedTime":1754926390000,"contributors":[{"name":"ZiYu","username":"ZiYu","email":"ziyedeyuu@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/ZiYu?v=4","url":"https://github.com/ZiYu"}]},"autoDesc":true,"filePathRelative":"notes/algorithm_group_tuition/2. 预学习部分/3.第一个C++程序.md","headers":[]}');export{s as comp,l as data};
